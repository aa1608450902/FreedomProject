
和往常一样,即使是在 32 位模式下,EIP 寄存器也只由处理器内部使用,程序中是无法直接访问的。
对 IP 和 EIP 的修改通常是用某些指令隐式进行的,这此指令包括 JMP、CALL、RET 和 IRET 等等。

当页功能开启时,段部件产生的地址就不再是物理地址了,而是线性地址,线性地址还要经页部件转换后,才是物理地址。

在实模式下，段寄存器存储的是真实的段地址，在保护模式下，16位的段寄存器无法放下32位的段地址，
因此，它们被称为选择符，即段寄存器的作用是用来选择描述符。
这些段寄存器中存放的不再是某个段的基地址，而是某个段的选择符（Selector）。
因为16位的寄存器 无法存放32位的段基地址，段基地址只好存放在一个叫做描述符表（Descriptor）的表中。
因此，在80386中，我们把段寄存器叫做选择符。


和一个段有关的信息需要 8 个字节来描述,所以称为段描述符,每个段都需要一个描述符。
为了存放这些描述符,需要在内存中开辟出一段空间。
在这段空间里,所有的描述符都是挨在一起,集中存放的,这就构成一个描述符表。

最主要的描述符表是全局描述符表(Global Descriptor Table,GDT)
,所谓全局,意味着该表是
为整个软硬件系统服务的。在进入保护模式前,必须要定义全局描述符表。

总结：
80x86内部真实的寄存器样貌
AH,AL -> AX(16) -> EAX(32)
BX
CX
DX

段寄存器
CS 16bit
DS
SS

指针寄存器
IP(16) -> EIP(32)
SP -> 


1. 16位实模式能访问1M的内存，段部件产生的是真实的内存地址。

1. 进入32位保护模式前，要先定义全局描述符表
2. 16位实模式 段寄存器保存的是真实内存的段基地址
（基地址也是地址，只不过16位不能保存20位的，所以要除以16，取出来时要再左移4位，再和偏移量相加。
3. 32位模式下的段寄存器保存的不再是真实内存的段的基地址了，而是段选择符
（段选择符组成：13位的索引域 1位的选择域TI（选GDT/LDT） 2位的请求者特权级RPL）

1. 段描述符表和页表有什么关系？
答：[段表和页表](https://www.cnblogs.com/worldisimple/articles/2447577.html)
2. gdtr ldtr等寄存器其实全都是CPU中MMU内存管理单元的。

进一步总结：
1. 为什么需要保护模式？
答：保护模式能够访问更大的内存空间；
2. 保护模式是怎样实现的？
答：保护模式通过描述符表来扩大对内存的访问。
描述符表都是保护模式里面的一种机制

1. 实模式下的C语言？
答：C语言是可以操作16位的实模式的，header.S几乎所有的代码都在准备实模式下的C语言环境。
也就是说，实模式下的C语言是需要环境的。


1. 保护模式 编程 纯保护模式下如何执行程序？
进去保护模式之前，我们设置了GDT段描述符表。
